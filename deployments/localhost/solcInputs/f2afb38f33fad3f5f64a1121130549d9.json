{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n\n    using PriceConverter for uint256;\n\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n\n    address private immutable i_owner;\n    //Use constant, immutable to lower the gas\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable{\n\n        // require(getConversionRate(msg.value) >= MINIMUM_USD, \"Didn't send enough!!\");\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"Didn't send enough!!\");\n        //18 decimals\n        s_funders.push(msg.sender); //To store all sender list\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public {\n\n        // require(msg.sender == i_owner, \"Sender is not i_owner\")\n\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++){\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        //reset the array\n        s_funders = new address[](0);\n\n        //msg.sender = address\n        //payable(msg.sender) = payable address\n\n        //transfer\n        // payable(msg.sender).transfer(address(this).balance);\n\n        //send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess, \"Send Failed\")\n\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner{\n\n        address[] memory funders = s_funders;\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n\n    }\n\n    function getOwner() public view returns(address){\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns(address){\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder) public view returns (uint256){\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n\n    modifier onlyOwner {\n        // require(msg.sender == i_owner, \"Sender is not i_owner\");\n        if(msg.sender != i_owner) { revert NotOwner(); }\n        _; // doing the rest of the code\n    }\n\n    // function withdraw(){}\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n\n        //ABI\n        //Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e -- ETH/USD \n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        // (/*uint80 roundID*/, int price, /*uint startedAt*/, /*uint timeStamp*/, /*uint80 answeredInRound*/) = priceFeed.latestRoundData();\n        (, int256 price,,,) = priceFeed.latestRoundData();\n        //ETH in terms of USD\n        //3000.00000000\n\n        return uint256(price * 1e10); // 1**10 = 10000000000\n    }\n\n    function getVersion() internal view returns (uint256){\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}